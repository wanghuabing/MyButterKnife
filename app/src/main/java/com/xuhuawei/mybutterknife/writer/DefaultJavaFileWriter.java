package com.xuhuawei.mybutterknife.writer;

import java.io.IOException;
import java.io.Writer;

import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.VariableElement;

import com.xuhuawei.mybutterknife.annotation.ViewInjector;

public class DefaultJavaFileWriter extends AbstractWriter {  
		  
	    public DefaultJavaFileWriter(ProcessingEnvironment mProcessingEnv) {  
	        super(mProcessingEnv);  
	    }  
	  
	    @Override  
	    protected void generateImport(Writer writer, InjectInfo info) throws IOException{  
	        writer.write("package "+info.packageName +";");  
	        writer.write("\n\n");  
	        writer.write("import com.jason.jasonknife.adapter.InjectAdapter;");  
	        writer.write("\n");  
	        writer.write("import com.jason.jasonknife.utils.ViewFinder;");  
	        writer.write("\n\n\n");  
	        writer.write("/*This class is generated by JasonKnife, do not modify!*/");  
	        writer.write("\n");  
	        writer.write("public class "+info.newClassName+" implements InjectAdapter<"+info.className+"> { ");  
	        writer.write("\n");  
	        writer.write("\n");  
	        writer.write("public void injects("+info.className+" target)  {");  
	        writer.write("\n");  
	    }  
	  
	    @Override  
	    protected void writeField(Writer writer, VariableElement element, InjectInfo info)throws IOException {  
	        //获取ViewInjector注解的值  
	        ViewInjector viewInjector = element.getAnnotation(ViewInjector.class);  
	        String fieldName = element.getSimpleName().toString();  
	        int id = viewInjector.value();  
	        writer.write("target."+fieldName+" =  ViewFinder.findViewById(target, "+id+");");  
	        writer.write("\n");  
	    }  
	  
	    @Override  
	    protected void writeEnd(Writer writer)throws IOException {  
	        writer.write("  }");  
	        writer.write("\n\n");  
	        writer.write(" }");  
	    }  

}
